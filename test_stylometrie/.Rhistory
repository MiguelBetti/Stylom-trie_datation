setwd("~/Desktop/UNIGE/Humanités numériques/CAS/Distant reading I/32M7129-master/Cours_03")
monDossier="~/Desktop/UNIGE/Humanités numériques/CAS/Distant reading I/32M7129-master/Cours_"
if(!require("reshape2")){
install.packages("reshape2")
library("reshape2")
}
theatre = "moliere_racine.tsv"
# le paramètre `header` permet de signaler que la première ligne contient le nom des colonnes
# le paramètre `sep` permet d'indiquer comment sont marquées les colonnes. La regex `\t` indique que nous utilisons des tabulations (notre fichier est donc en fait un `tsv`).
theatre <- read.csv(theatre, header=TRUE, sep = "\t", quote = '',fill = TRUE)
theatre = "moliere_racine.tsv"
# le paramètre `header` permet de signaler que la première ligne contient le nom des colonnes
# le paramètre `sep` permet d'indiquer comment sont marquées les colonnes. La regex `\t` indique que nous utilisons des tabulations (notre fichier est donc en fait un `tsv`).
theatre <- read.csv(theatre, header=TRUE, sep = "\t", quote = '',fill = TRUE, fileEncoding = "utf-8")
str(theatre)
View(theatre)
head(theatre$auteur)
# Je peux augmenter le nombre de résultat affiché en indiquant le chiffre souhaité de la manière suivante:
#head(theatre$auteur,10)
#Pour les dernières entrées, il existe une fonction `tail`
#tail(theatre$auteur)
#Je charge deux nouvelles librairies pour le _text mining_
if(!require("tm")){
install.packages("tm")
library("tm")
}
if(!require("tidytext")){
install.packages("tidytext")
library("tidytext")
}
corpus <- Corpus(VectorSource(theatre$texteLemmat), readerControl = list(language = "fr"))
corpus
ncol(as.matrix(DocumentTermMatrix(corpus)))
stopwords("french")
#Donner un nom au fichier que je télécharge
mesStops="stopwords-fr.csv"
#indiquer l'URL où se trouve le document à télécharger
stopword_enLigne = "https://raw.githubusercontent.com/stopwords-iso/stopwords-fr/master/stopwords-fr.txt"
#télécharger le fichier et l'enregistrer sous le nom que je viens de lui donner
download.file(stopword_enLigne,mesStops)
#Comme c'est un tableur, je le lis avec la fonction adéquat
stopword_enLigne = read.csv(stopword_enLigne, header=FALSE, stringsAsFactors=FALSE)[,]
#je jette un coup d'œil aux 10 premiers
head(stopword_enLigne,10)
corpus_clean <- tm_map(corpus, removeWords, stopwords("french"))
corpus_clean <- tm_map(corpus, removeWords, stopword_enLigne)
#Je jette un coup d'œil à la sixième entrée pour contrôler que tout est en ordre
inspect(corpus_clean[6])
#Je recharge mon corpus
corpus_clean <- tm_map(corpus_clean, PlainTextDocument)
#je crée une fonction a deux paramètres: le corpus d'entrée et la liste des stopwords.
removeStopWords <- function(corpus_a_nettoyer, stopwords_a_retirer){
# je fais une boucle pour retirer chaque mot de ```stopwords_a_retirer```
for (word in stopwords_a_retirer){
#J'utilise une fonction anonyme (_snonymous function_) à un paramètre qui utilise la fonction ```gsub``` qui remplace le mot de ```stopwords_a_retirer``` par rien.
removeWord <- function(x) gsub(paste("(^|\\s)(",word,") ", sep="")," ",x)
#on retire le mot
corpus_a_nettoyer <- tm_map(corpus_a_nettoyer, removeWord)
}
#Je renvoie le résultat
return(corpus_a_nettoyer)
}
#Je passe mon ```corpus_clean``` comme ```corpus_a_nettoyer``` et mes ```stopword_enLigne``` comme ```stopwords_a_retirer```.
corpus_clean <- removeStopWords(corpus_clean, stopword_enLigne)
corpus_clean
corpus_clean[[1]][[1]]
stopWords <- c( "à_le", "de_le", "-être", "faire", "falloir", "savoir", "pouvoir", "devoir", "devoir", "voir", "vouloir")
corpus_clean <- tm_map(corpus_clean, removeWords, stopWords)
inspect(corpus_clean[6])
dtm <- DocumentTermMatrix(corpus_clean)
rownames(dtm) <- theatre$genre
freq <- as.data.frame(colSums(as.matrix(dtm)))
colnames(freq) <- c("frequence")
#Comme je vais dessiner un graph, j'ai besoin d'une nouvelle librairie: ```ggplot2```
if (!require("ggplot2")){
install.packages("ggplot2")
library("ggplot2")
}
#Je dessine mon graph
ggplot(freq, aes(x=frequence)) + geom_density()
#Je retire tous les mots qui apparaissent entre 0 et 400 fois (on peut remplacer 400 par 100, ou même 10 si le corpus est trop gros)
motsPeuFrequents <- findFreqTerms(dtm, 0, 400)
length(motsPeuFrequents)
head(motsPeuFrequents,50)
motsTresFrequents <- findFreqTerms(dtm, 401, Inf)
length(motsTresFrequents)
head(motsTresFrequents,50)
#Je crée une fonction ```grandMenage```
grandMenage <- function(corpus_a_nettoyer, mots_peu_importants){
#Afin de simplifier le travail (de mon ordinateur), je vais rassembler les mots à retirer en groupe 500 tokens, que je vais traiter séparément.
chunk <- 500
#Je compte le nombre de mots à retirer
n <- length(mots_peu_importants)
#Je compte les groupes de 500 (ici 17.05), j'arrondis au plus petit entier supérieur (ici 18)
r <- rep(1:ceiling(n/chunk),each=chunk)[1:n]
#Je constitue mes lots sur la base du décompte précédemment mentionné
d <- split(mots_peu_importants,r)
#Je fais une boucle: pour retirer les mots du corpus, morceau par morceau
for (i in 1:length(d)) {
corpus_a_nettoyer <- tm_map(corpus_a_nettoyer, removeWords, c(paste(d[[i]])))
}
#Je renvoie un résultat
return(corpus_a_nettoyer)
}
# J'utilise ma fonction avec ```corpus_clean``` comme ```corpus_a_nettoyer``` et ```motsPeuFrequents``` comme ```mots_peu_importants```
corpus_clean <- grandMenage(corpus_clean, motsPeuFrequents)
dtm <- DocumentTermMatrix(corpus_clean)
rownames(dtm) <- theatre$genre
freq <- as.data.frame(colSums(as.matrix(dtm)))
colnames(freq) <- c("frequence")
#Je fais un petit graph
ggplot(freq, aes(x=frequence)) + geom_density()
rowTotals <- apply(dtm , 1, sum)      #Find the sum of words in each Document
dtm_clean   <- dtm[rowTotals> 0, ]    #remove all docs without words
#J'installe une nouvelle librairie pour le _topic modeling_
if(!require("topicmodels")){
install.packages("topicmodels")
library("topicmodels")
}
#Je vais partir sur une classification en deux _topics_
k = 2
lda_2 <- LDA(dtm_clean, k= k, control = list(seed = 1234))
##Je tente avec trois, pour voir…
lda_3 <- LDA(dtm_clean, k= k+1, control = list(alpha = 0.1))
topics <- tidy(lda_2, matrix = "beta")
topics
## Set parameters for Gibbs sampling
#Le modèle va tourner 2000 fois avant de commencer à enregistrer les résultats
burnin <- 2000
#Après cela il va encore tourner 2000 fois
iter <- 2000
# Il ne va enregistrer le résultat que toutes les 500 itérations
thin <- 500
#seed et nstart pour la reproductibilité
SEED=c(1, 2, 3, 4, 5)
seed <-SEED
nstart <- 5
#Seul meilleur modèle est utilisé
best <- TRUE
#2 topics
lda_gibbs_2 <- LDA(dtm_clean, k, method="Gibbs", control=list(nstart=nstart, seed=seed, best=best, burnin=burnin, iter=iter, thin=thin))
#3 topics
lda_gibbs_3 <- LDA(dtm_clean, k+1, method="Gibbs", control=list(nstart=nstart, seed=seed, best=best, burnin=burnin, iter=iter, thin=thin))
"LDA 2"
termsTopic <- as.data.frame(terms(lda_2,10))
head(termsTopic,11)
"LDA 3"
termsTopic <- as.data.frame(terms(lda_3,10))
head(termsTopic,11)
"LDA GIBBS 2"
termsTopic <- as.data.frame(terms(lda_gibbs_2,10))
head(termsTopic,11)
"LDA GIBBS 3"
termsTopic <- as.data.frame(terms(lda_gibbs_3,10))
head(termsTopic,11)
topics <- tidy(lda_gibbs_2, matrix = "beta")
topics
#Je vais encore solliciter une nouvelle librairie
if (!require("dplyr")){
install.packages("dplyr")
library("dplyr")
}
#Je récupère mes mots
top_terms <- topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup()  %>%
arrange(topic, -beta)
#Je fais un graph
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
scale_x_reordered()
if (!require("reshape2")){
install.packages("reshape2")
library("reshape2")
}
df <- melt(as.matrix(dtm_clean))
df <- df[df$Terms %in% findFreqTerms(dtm_clean, lowfreq = 800), ]
ggplot(df, aes(as.factor(Docs), Terms, fill=log(value))) +
geom_tile() +
xlab("Genres") +
scale_fill_continuous(low="#FEE6CE", high="#E6550D") +
theme(axis.text.x = element_text(angle=90, hjust=1))
tt <- posterior(lda_gibbs_2)$terms
melted = melt(tt[,findFreqTerms(dtm_clean, 1000,10000)])
colnames(melted) <- c("Topics", "Terms", "value")
melted$Topics <- as.factor(melted$Topics)
ggplot(data = melted, aes(x=Topics, y=Terms, fill=value)) +
geom_tile() +
theme(text = element_text(size=35))
tt <- posterior(lda_gibbs_3)$terms
melted = melt(tt[,findFreqTerms(dtm_clean, 1000,10000)])
colnames(melted) <- c("Topics", "Terms", "value")
melted$Topics <- as.factor(melted$Topics)
ggplot(data = melted, aes(x=Topics, y=Terms, fill=value)) +
geom_tile() +
theme(text = element_text(size=35))
DocumentTopicProbabilities <- as.data.frame(lda_gibbs_2@gamma)
rownames(DocumentTopicProbabilities) <- rownames(corpus_clean)
head(DocumentTopicProbabilities)
if (!require("wordcloud")){
install.packages("wordcloud")
library("wordcloud")
}
if (!require("RColorBrewer")){
install.packages("RColorBrewer")
library("RColorBrewer")
}
if (!require("wordcloud2")){
install.packages("wordcloud2")
library("wordcloud2")
}
tm <- posterior(lda_gibbs_2)$terms
data = data.frame(colnames(tm))
head(data)
for(topic in seq(k)){
data$topic <-tm[topic,]
#text(x=0.5, y=1, paste("V",topic, sep=""),cex=0.6)
wordcloud(
words = data$colnames.tm.,
freq = data$topic,
#sous ce seuil, les mots ne seront pas affichés
min.freq=0.0002,
#nombre maximum de mots à afficher
max.words=30,
#Si faux, en ordre croissant
random.order=FALSE,
#% de mots à 90°
rot.per=.35,
#taille du graph
scale=c(10,10),
#couleurs
colors = brewer.pal(5, "Dark2")
# il est possible de rentrer directement les couleurs qui nous intéressent
#c("red", "blue", "yellow", "chartreuse", "cornflowerblue", "darkorange")
)
}
getwd()
if(!require("stylo")){
install.packages("stylo")
library(stylo)
}
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "classic",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
setwd("/Users/miguel/Desktop/Stylometrie_datation/test_stylometrie")
getwd()
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =500, mfw.max = 500, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =5000, mfw.max = 5000, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta classic",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta classic",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =5000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =10000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =2000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =2000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =2000, mfw.max = 2000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =2000, mfw.max = 2000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =3000, mfw.max = 3000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "corpus",
corpus.format = "xml.drama", corpus.lang = "French",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 1000, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "manhattan",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 1000, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "manhattan",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 1000, mfw.max = 100, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "manhattan",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 2000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "manhattan",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 5000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "manhattan",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 1,  distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 2,  distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 1,  distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 5000, mfw.max = 100, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 1,  distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 100, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 1,  distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 1,  distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =5000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =3000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =3000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "corpus",
corpus.format = "xml.drama", corpus.lang = "French",
analyzed.features = "w", mfw.min =5000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =3000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 1,  distance.measure = "wurzburg",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 5000, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 1,  distance.measure = "wurzburg",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus",corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 1,  distance.measure = "wurzburg",
pca.visual.flavour = "classic")
resultats
summary(resultats)
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =4000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =3000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
resultats
summary(resultats)
resultats$features
resultats$table.with.all.freqs
resultats$distance.table
