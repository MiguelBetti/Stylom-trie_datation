# Generate node color variable to plot the path:
coleur_noeud <- rep("gray40", vcount(data))
coleur_noeud[unlist(mon_chemin$vpath)] <- "gold"
"Les nœuds"
coleur_noeud #cf. 1 et 13
plot(data, vertex.color=coleur_noeud, edge.color=couleur_arc,
edge.width=largeur_arc, edge.arrow.mode=0)
ceb <- cluster_edge_betweenness(data)
dendPlot(ceb, mode="hclust")
plot(ceb, data)
coords <- layout_with_fr(data_simplified, dim=3)
open3d()
rglplot(data, layout=coords)
dirfolder=getwd()
#open3d plutôt que rgl.open() pour une sauvegarde
open3d()
rglplot(data_simplified, layout=coords)
#Je prépare l'angle
rgl.viewpoint(theta=0, phi=0)
#Sauvegarder un screenshot (en png)
rgl.snapshot(paste(dirfolder,"monGRaph3d.png",sep=""), fmt="png", top=TRUE)
#Sauvegarde en html
rglfolder=writeWebGL(dir = paste(dirfolder,"first_net3d",sep=""), width=900)
#J'ouvre le résultat dans le navigateur
browseURL(rglfolder)
# je convertis mon igraphe en une liste  composée de deux data.frames (nodes et edges)
data_3d_vis <- toVisNetworkData(data)
# Pour le menu déroulant (cf infra)
names <- sort(data_3d_vis$nodes$label)
visNetwork(nodes = data_3d_vis$nodes,
edges = data_3d_vis$edges,
main = "Mon graphe interactif",
submain = "Alogirhtme de Fruchterman–Reingold",
footer = "Wow") %>%
#Je trace le graphe
visIgraphLayout(layout = "layout_with_fr",
smooth = FALSE,
#J'ajoute de la dynamique (cf. _infra_)
physics = TRUE
)
visNetwork(nodes = data_3d_vis$nodes,
edges = data_3d_vis$edges,
main = "Mon graphe interactif",
submain = "Alogirhtme de Fruchterman–Reingold",
footer = "Wow") %>%
#Je trace le graphe
visIgraphLayout(layout = "layout_with_fr",
smooth = FALSE,
#J'ajoute de la dynamique (cf. _infra_)
physics = TRUE
) %>%
#Je mets en valeur les nœuds liés
visOptions(highlightNearest = list(enabled = TRUE,
#séparés de 1 degré
degree = 1,
#il s'illuminent quand la souris passe sur le nœud
hover = TRUE),
#Je crée un sélecteur
nodesIdSelection = list(enabled = TRUE,
values = names))
data_3d_vis_plot <- visNetwork(nodes = data_3d_vis$nodes,
edges = data_3d_vis$edges,
main = "Mon graphe interactif",
submain = "Alogirhtme de Fruchterman–Reingold",
footer = "Wow") %>%
#Je trace le graphe
visIgraphLayout(layout = "layout_with_fr",
smooth = FALSE,
#J'ajoute de la dynamique (cf. _infra_)
physics = TRUE
) %>%
#Je mets en valeur les nœuds liés
visOptions(highlightNearest = list(enabled = TRUE,
#séparés de 1 degré
degree = 1,
#passage souris
hover = TRUE),
#Je crée un sélecteur
nodesIdSelection = list(enabled = TRUE,
values = names)
) %>%
#taille des nœuds
visNodes(size = 50) %>%
#couleur des arêtes
visEdges(color = list(highlight = "lightgray")) %>%
#Je paramètre la répulsion
visPhysics(#Vélocité des nœuds
maxVelocity = 1,
#type de répulsion hiérarchique
solver = "forceAtlas2Based",
#paramètres du forceAtlas2Based
#la `gravitationalConstant` décrit la répulsion (l'écartement entre les nœuds), le chiffre est donc négatif, sinon oncrée de l'attraction
forceAtlas2Based = list(gravitationalConstant = -1000)
)
data_3d_vis_plot
write_graph(data, "edgelist.txt", format="edgelist")
svg(file="monGraph.svg")
plot(data)
dev.off()
png(file="monGraph.png")
plot(data)
dev.off()
write_graph(data, "edgelist.txt", format="edgelist")
svg(file="monGraph.svg")
plot(data)
dev.off()
png(file="monGraph.png")
plot(data)
dev.off()
if(!require("stylo")){
install.packages("stylo")
library(stylo)
}
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =5000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
resultats <- stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =5000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
resultats
summary(resultats)
resultats$features
resultats$table.with.all.freqs
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =5000, mfw.max = 100, mfw.incr=100,
analysis.type = "PCV", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =2000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =1000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =5000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "wurzburg",
pca.visual.flavour = "classic")
if(!require("knitr")){
install.packages("knitr")
library(knitr)
}
knitr::opts_chunk$set(echo = TRUE, fig.width=20)
if(!require("leaflet")){
install.packages("leaflet")
library(leaflet)
}
if(!require("sp")){
install.packages("sp")
library(sp)
}
if(!require("rgdal")){
install.packages("rgdal")
library(rgdal)
}
if(!require("RColorBrewer")){
install.packages("RColorBrewer")
library(RColorBrewer)
}
if(!require("htmlwidgets")){
install.packages("htmlwidgets")
library(htmlwidgets)
}
if(!require("htmltools")){
install.packages("htmltools")
library(htmltools)
}
if(!require("leaflet.extras")){
install.packages("leaflet.extras")
library(leaflet.extras)
}
if(!require("geojsonio")){
install.packages("geojsonio")
library(geojsonio)
}
if(!require("geojsonlint")){
install.packages("geojsonlint")
library(geojsonlint)
}
if(!require("rjson")){
install.packages("rjson")
library(rjson)
}
if(!require("leaftime")){
install.packages("leaftime")
library(leaftime)
}
setwd("~/Desktop/Cartografía")
lope  <- read.csv("Data/lope.csv")
caballero_illescas  <- read.csv("Data/caballero_illescas.csv")
caballero_illescas$lng <- as.numeric(caballero_illescas$lng)
caballero_illescas$lat <- as.numeric(caballero_illescas$lat)
fingido_verdadero  <- read.csv("Data/fingido_verdadero.csv")
fingido_verdadero$lng <- as.numeric(fingido_verdadero$lng)
fingido_verdadero$lat <- as.numeric(fingido_verdadero$lat)
dama_boba  <- read.csv("Data/dama_boba.csv")
dama_boba$lng <- as.numeric(dama_boba$lng)
dama_boba$lat <- as.numeric(dama_boba$lat)
fuente_ovejuna  <- read.csv("Data/fuente_ovejuna.csv")
fuente_ovejuna$lng <- as.numeric(fuente_ovejuna$lng)
fuente_ovejuna$lat <- as.numeric(fuente_ovejuna$lat)
perro_hortelano  <- read.csv("Data/perro_hortelano.csv")
perro_hortelano$lng <- as.numeric(perro_hortelano$lng)
perro_hortelano$lat <- as.numeric(perro_hortelano$lat)
View(lope)
df <- data.frame(obra=lope$obra,
lugar=lope$lugar,
menciones=lope$menciones,
latitud=lope$lat,
longitud=lope$lng)
df
map <- leaflet(df) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)%>%
setView(lng = -40, lat = 40, zoom =2.4)   %>%
addCircleMarkers(lng = caballero_illescas$lng,
lat = caballero_illescas$lat,
group = "El caballero de Illescas",
color = "red",
weight=1,
fillOpacity = 0.5,
label = ~paste(caballero_illescas$lugar,
caballero_illescas$menciones)) %>%
addCircleMarkers(lng = fingido_verdadero$lng,
lat = fingido_verdadero$lat,
group = "Lo fingido verdadero",
color = "blue",
weight=1,
fillOpacity = 0.5,
label = ~paste(fingido_verdadero$lugar,
fingido_verdadero$menciones)) %>%
addCircleMarkers(lng = dama_boba$lng,
lat = dama_boba$lat,
group = "La dama boba",
color = "yellow",
weight=1,
fillOpacity = 0.5,
label = ~paste(dama_boba$lugar,
dama_boba$menciones)) %>%
addCircleMarkers(lng = fuente_ovejuna$lng,
lat = fuente_ovejuna$lat,
group = "Fuente Ovejuna",
color = "green",
weight=1,
fillOpacity = 0.5,
label = ~paste(fuente_ovejuna$lugar,
fuente_ovejuna$menciones)) %>%
addCircleMarkers(lng = perro_hortelano$lng,
lat = perro_hortelano$lat,
group = "El perro del hortelano",
color = "pink",
weight=1,
fillOpacity = 0.5,
label = ~paste(perro_hortelano$lugar,
perro_hortelano$menciones)) %>%
addResetMapButton() %>%
addLayersControl(baseGroups = c("Empty layer"),
overlayGroups = c("El caballero de Illescas","Lo fingido verdadero", "La dama boba", "Fuente Ovejuna", "El perro del hortelano"),
options = layersControlOptions(collapsed = TRUE))
map
saveWidget(map, file="mapa.html")
browseURL("mapa.html")
map <- leaflet(df) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)%>%
setView(lng = -40, lat = 40, zoom =2.4)   %>%
addCircleMarkers(lng = caballero_illescas$lng,
lat = caballero_illescas$lat,
group = "El caballero de Illescas",
color = "red",
weight=1,
fillOpacity = 0.5,
label = ~paste(caballero_illescas$lugar,
caballero_illescas$menciones)) %>%
addCircleMarkers(lng = fingido_verdadero$lng,
lat = fingido_verdadero$lat,
group = "Lo fingido verdadero",
color = "blue",
weight=1,
fillOpacity = 0.5,
label = ~paste(fingido_verdadero$lugar,
fingido_verdadero$menciones)) %>%
addCircleMarkers(lng = dama_boba$lng,
lat = dama_boba$lat,
group = "La dama boba",
color = "yellow",
weight=1,
fillOpacity = 0.5,
label = ~paste(dama_boba$lugar,
dama_boba$menciones)) %>%
addCircleMarkers(lng = fuente_ovejuna$lng,
lat = fuente_ovejuna$lat,
group = "Fuente Ovejuna",
color = "green",
weight=1,
fillOpacity = 0.5,
label = ~paste(fuente_ovejuna$lugar,
fuente_ovejuna$menciones)) %>%
addCircleMarkers(lng = perro_hortelano$lng,
lat = perro_hortelano$lat,
group = "El perro del hortelano",
color = "brown",
weight=1,
fillOpacity = 0.5,
label = ~paste(perro_hortelano$lugar,
perro_hortelano$menciones)) %>%
addResetMapButton() %>%
addLayersControl(baseGroups = c("Empty layer"),
overlayGroups = c("El caballero de Illescas","Lo fingido verdadero", "La dama boba", "Fuente Ovejuna", "El perro del hortelano"),
options = layersControlOptions(collapsed = TRUE))
map
saveWidget(map, file="mapa.html")
browseURL("mapa.html")
saveWidget(map, file="mapa.html")
browseURL("mapa.html")
map <- leaflet(df) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)%>%
setView(lng = -40, lat = 40, zoom =2.4)   %>%
addCircleMarkers(lng = caballero_illescas$lng,
lat = caballero_illescas$lat,
group = "El caballero de Illescas",
color = "red",
weight=1,
fillOpacity = 0.5,
label = ~paste(caballero_illescas$lugar,
caballero_illescas$menciones)) %>%
addCircleMarkers(lng = fingido_verdadero$lng,
lat = fingido_verdadero$lat,
group = "Lo fingido verdadero",
color = "blue",
weight=1,
fillOpacity = 0.5,
label = ~paste(fingido_verdadero$lugar,
fingido_verdadero$menciones)) %>%
addCircleMarkers(lng = dama_boba$lng,
lat = dama_boba$lat,
group = "La dama boba",
color = "yellow",
weight=1,
fillOpacity = 0.5,
label = ~paste(dama_boba$lugar,
dama_boba$menciones)) %>%
addCircleMarkers(lng = fuente_ovejuna$lng,
lat = fuente_ovejuna$lat,
group = "Fuente Ovejuna",
color = "green",
weight=1,
fillOpacity = 0.5,
label = ~paste(fuente_ovejuna$lugar,
fuente_ovejuna$menciones)) %>%
addCircleMarkers(lng = perro_hortelano$lng,
lat = perro_hortelano$lat,
group = "El perro del hortelano",
color = "brown",
weight=1,
fillOpacity = 0.5,
label = ~paste(perro_hortelano$lugar,
perro_hortelano$menciones)) %>%
addResetMapButton() %>%
addLayersControl(baseGroups = c("Empty layer"),
overlayGroups = c("El caballero de Illescas","Lo fingido verdadero", "La dama boba", "Fuente Ovejuna", "El perro del hortelano"),
options = layersControlOptions(collapsed = FALSE))
map
map <- leaflet(df) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)%>%
setView(lng = -40, lat = 40, zoom =2.4)   %>%
addCircleMarkers(lng = caballero_illescas$lng,
lat = caballero_illescas$lat,
group = "El caballero de Illescas",
color = "red",
weight=1,
fillOpacity = 0.5,
label = ~paste(caballero_illescas$lugar,
caballero_illescas$menciones)) %>%
addCircleMarkers(lng = fingido_verdadero$lng,
lat = fingido_verdadero$lat,
group = "Lo fingido verdadero",
color = "blue",
weight=1,
fillOpacity = 0.5,
label = ~paste(fingido_verdadero$lugar,
fingido_verdadero$menciones)) %>%
addCircleMarkers(lng = dama_boba$lng,
lat = dama_boba$lat,
group = "La dama boba",
color = "yellow",
weight=1,
fillOpacity = 0.5,
label = ~paste(dama_boba$lugar,
dama_boba$menciones)) %>%
addCircleMarkers(lng = fuente_ovejuna$lng,
lat = fuente_ovejuna$lat,
group = "Fuente Ovejuna",
color = "green",
weight=1,
fillOpacity = 0.5,
label = ~paste(fuente_ovejuna$lugar,
fuente_ovejuna$menciones)) %>%
addCircleMarkers(lng = perro_hortelano$lng,
lat = perro_hortelano$lat,
group = "El perro del hortelano",
color = "brown",
weight=1,
fillOpacity = 0.5,
label = ~paste(perro_hortelano$lugar,
perro_hortelano$menciones)) %>%
addResetMapButton() %>%
addLayersControl(baseGroups = c("Empty layer"),
overlayGroups = c("El caballero de Illescas","Lo fingido verdadero", "La dama boba", "Fuente Ovejuna", "El perro del hortelano"),
options = layersControlOptions(collapsed = TRUE))
map
setwd("/Users/miguel/Desktop/Stylometrie_datation/test_stylometrie")
getwd()
if(!require("stylo")){
install.packages("stylo")
library(stylo)
}
resultats <- stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 2000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=TRUE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "manhattan",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "manhattan",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=FALSE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 2000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats
summary(resultats)
resultats$features
resultats$table.with.all.freqs
resultats$distance.table
stylo(gui=FALSE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 2000, mfw.max = 100, mfw.incr=100,
analysis.type = "PCV",  distance.measure = "wurzburg",
pca.visual.flavour = "classic")
getwd()
getwd()
getwd()
getwd()
getwd()
setwd("/Users/miguel/Desktop/Stylometrie_datation/test_stylometrie")
getwd()
getwd()
setwd("/Users/miguel/Desktop/Stylometrie_datation/test_stylometrie")
setwd("/Users/miguel/Desktop/Stylometrie_datation/test_stylometrie/R")
setwd("/Users/miguel/Desktop/Stylometrie_datation/test_stylometrie/R")
getwd()
if(!require("stylo")){
install.packages("stylo")
library(stylo)
}
stylo(gui=TRUE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min =100, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "manhattan",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "data/corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 2000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 2000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "manhattan",
pca.visual.flavour = "classic")
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 100, mfw.max = 1000, mfw.incr=100,
analysis.type = "BCT", consensus.strength = 0.5,  distance.measure = "delta",
pca.visual.flavour = "classic")
resultats <- stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 2000, mfw.max = 100, mfw.incr=100,
analysis.type = "CA", distance.measure = "delta",
pca.visual.flavour = "classic")
resultats
summary(resultats)
resultats$features
resultats$table.with.all.freqs
resultats$distance.table
stylo(gui=FALSE, corpus.dir = "corpus", corpus.lang = "Spanish",
analyzed.features = "w", mfw.min = 2000, mfw.max = 100, mfw.incr=100,
analysis.type = "PCV",  distance.measure = "wurzburg",
pca.visual.flavour = "classic")
